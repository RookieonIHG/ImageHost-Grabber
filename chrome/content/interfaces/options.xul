<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://global/skin/preferences.css" type="text/css"?>
<?xml-stylesheet href="chrome://imagegrabber/skin/options.css" type="text/css"?>
<!DOCTYPE window [
	<!ENTITY % optionsDTD SYSTEM "chrome://imagegrabber/locale/options.dtd">
	%optionsDTD;
	<!ENTITY % optionsLIM SYSTEM "chrome://imagegrabber/content/interfaces/options.lim">
	%optionsLIM;
	<!ENTITY % brandDTD   SYSTEM "chrome://branding/locale/brand.dtd">
	%brandDTD;
]>


<prefwindow title="&imagegrabber_options;" id="imagegrabberPreferences" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	onload="setEnableStates();">

<stringbundleset id="stringbundleset">
	<stringbundle id="imagegrabber-strings" src="chrome://imagegrabber/locale/imagegrabber.properties" />
</stringbundleset>

<script type="application/x-javascript" src="chrome://imagegrabber/content/imagegrabber/globals.js" />
<script type="application/x-javascript" src="chrome://imagegrabber/content/imagegrabber/imagegrabber.js" />
<script type="application/x-javascript" src="chrome://imagegrabber/content/imagegrabber/debug.js" />
<script type="application/x-javascript" src="chrome://imagegrabber/content/imagegrabber/utils.js" />

<script type="text/javascript">
<![CDATA[
var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService(Components.interfaces.nsIPromptService);

ihg_Globals.addonPath = ihg_Globals.prefManager.getCharPref("extensions.imagegrabber.addonPath");
var Initial_pref = parse(ihg_Globals.prefManager.getCharPref("extensions.imagegrabber.enable@startup"));

function setEnableStates() {
	toggleEnableState('cb_downloadTimeout', false, 'tb_downloadTimeout', 'lab_downloadTimeout');
	handleDLTimeoutControl();
	}

function handleDLTimeoutControl() {
	var cbDLTimeout = document.getElementById("cb_downloadTimeout");
	var tbDLTimeout = document.getElementById("tb_downloadTimeout");
	
	if (cbDLTimeout.checked) {
		tbDLTimeout.setAttribute("min", "1");
		}
	else {
		tbDLTimeout.removeAttribute("min");
		}
	}

function checkRestart() {
	let RestartApp_button = document.getElementById("restartApp");
	if (['enableConLog','enableDebug'].some(function(prefId) {
			return document.getElementById(prefId).value != Initial_pref[prefId];
			})) {
		RestartApp_button.removeAttribute("disabled");
		}
	else {
		RestartApp_button.setAttribute("disabled", true);
		};
	}

function restartApp() {
	let nsIAppStartup = Components.interfaces.nsIAppStartup;
	Components.classes["@mozilla.org/toolkit/app-startup;1"].getService(nsIAppStartup).quit(nsIAppStartup.eForceQuit | nsIAppStartup.eRestart);
	}

// This function toggles the enabled state of a target element with ID
// of 'targetId'.  The enabled state of the target element is dictated
// by the 'checked' state of the control element with ID of 'controlId'.
//
// The invertState flag specifies whether or not the target element
// should be disabled when the control element is enabled ( true )
// or vice versa (false).
//
// This is a variable length function to allow multiple targetId's
// i.e.:	toggleEnableState(controlId, invertState, targetId1, targetId2, ...)

function toggleEnableState(controlId, invertState, ...targetIds) {
	var control = document.getElementById(controlId).checked;
	var targetDisabled = invertState ? control : !control;
	targetIds.forEach((targetId) => document.getElementById(targetId).disabled = targetDisabled);
	}

]]>
</script>

<preferences>
	<preference id="cacheThreadSuck" name="extensions.imagegrabber.cachethreadsuck" type="bool"/>
</preferences>

<prefpane id="fileopts" label="&file_saving_options;" orient="vertical">

	<preferences>
		<preference id="boolpref_autorename" name="extensions.imagegrabber.autorename" type="bool"/>
		<preference id="createDocSub" name="extensions.imagegrabber.createdoctitlesubfolder" type="bool"/>
		<preference id="fileExistBehavior" name="extensions.imagegrabber.fileexistsbehavior" type="string"/>
		<preference id="prefixFileName" name="extensions.imagegrabber.prefixfilenames" type="bool"/>
		<preference id="createPageDirs" name="extensions.imagegrabber.createpagedirs" type="bool"/>
		<preference id="prefixDirs" name="extensions.imagegrabber.prefixdirectories" type="bool"/>
		<preference id="useLastModFromHeader" name="extensions.imagegrabber.uselastmodfromheader" type="bool"/>
	</preferences>

	<checkbox id="cb_prefixFileNames" preference="prefixFileName" label="&prefix_filenames_to_reflect_page_order;"
		onsyncfrompreference="toggleEnableState(this.id, true, 'rg_existBehavior');"/>
	<groupbox id="gb_existBehavior">
		<caption label="&what_to_do_if_file_exists_in_target_location;"/>
		<radiogroup id="rg_existBehavior" preference="fileExistBehavior" orient="horizontal">
			<radio label="&rename_file;" value="rename" flex="1"/>
			<radio label="&skip_file;" value="skip" flex="1"/>
			<radio label="&overwrite_file;" value="overwrite" flex="1"/>
		</radiogroup>
	</groupbox>
	<checkbox preference="boolpref_autorename" label="&autorename_imagevenue_and_fapomatic_files;"/>
	<checkbox id="cb_createDocSub" preference="createDocSub" label="&create_a_subdirectory_with_document_title_inside_the_target_directory;"
		onsyncfrompreference="toggleEnableState(this.id, false, 'cb_prefixDirs');"/>
	<checkbox id="cb_prefixDirs" preference="prefixDirs" label="&prefix_directories_to_uniquely_and_chronologically_identify_them;" class="indent"/>
	<checkbox id="boolpref_createPageDirs" preference="createPageDirs" label="&create_separate_directories_for_each_page_when_using_thread_sucker;"/>
	<checkbox id="cb_useLastModFromHeader" preference="useLastModFromHeader" label="&use_last_modified_header;"/>

</prefpane>

<prefpane id="genopts" label="&general;" orient="vertical">

	<preferences>
		<preference id="showDLDir" name="extensions.imagegrabber.showdldir" type="bool"/>
		<preference id="showInTools" name="extensions.imagegrabber.showintools" type="bool"/>
		<preference id="removeDupLinks" name="extensions.imagegrabber.removeduplinks" type="bool"/>
		<preference id="removeDupLinksXpages" name="extensions.imagegrabber.removeduplinksXpages" type="bool"/>
		<preference id="DLWindowSuppressCloseConfirm" name="extensions.imagegrabber.dlwindowcloseconfirm" type="bool" inverted="true"/>
		<preference id="autoCloseWindow" name="extensions.imagegrabber.autoclosewindow" type="bool"/>
		<preference id="DLWindowCloseImmediately" name="extensions.imagegrabber.dlwindowcloseimmediately" type="bool"/>
		<preference id="cacheDLWin" name="extensions.imagegrabber.cachedlwin" type="bool"/>
	</preferences>

	<checkbox id="cb_showDLDir" preference="showDLDir" label="&show_the_download_directory_box;"/>
	<checkbox id="cb_showInTools" preference="showInTools" label="&show_the_image_grabber_menu_in_the_tools_menu;"/>
	<checkbox id="cb_removeDupLinks" preference="removeDupLinks" label="&remove_duplicate_links;"
		onsyncfrompreference="toggleEnableState(this.id, false, 'cb_removeDupLinksXpages');"/>
	<checkbox id="cb_removeDupLinksXpages" preference="removeDupLinksXpages" label="&even_across_multiple_pages;" class="indent"/>
	<checkbox id="cb_DLWindowSuppressCloseConfirm" preference="DLWindowSuppressCloseConfirm" label="&suppress_close_download_confirmation_dialog;"/>
	<checkbox id="cb_autoCloseWindow" preference="autoCloseWindow" label="&close_download_window;"
		onsyncfrompreference="toggleEnableState(this.id, false, 'cb_DLWindowCloseImmediately');"/>
	<checkbox id="cb_DLWindowCloseImmediately" preference="DLWindowCloseImmediately" label="&without_delay;" class="indent"/>
	<checkbox id="cb_cacheDLWin" hidden="true" preference="cacheDLWin" label="&keep_download_window_contents;"/>

</prefpane>

<prefpane id="embeddedopts" label="&embedded_images;" orient="vertical">

	<preferences>
		<preference id="downloadEmbeddedImages" name="extensions.imagegrabber.downloadembeddedimages" type="bool"/>
		<preference id="minEmbeddedHeight" name="extensions.imagegrabber.minembeddedheight" type="int"/>
		<preference id="minEmbeddedWidth" name="extensions.imagegrabber.minembeddedwidth" type="int"/>
		<preference id="minFileSize" name="extensions.imagegrabber.minfilesize" type="int"/>
	</preferences>

	<groupbox>
		<caption>
			<checkbox id="cb_embImages" preference="downloadEmbeddedImages" label="&download_embedded_images;"
				onsyncfrompreference="toggleEnableState(this.id, false, 'lab_minEmbeddedWidth', 'lab_minEmbeddedHeight', 'lab_minSize');"/>
		</caption>
		<grid>
			<rows>
				<label>&enter_the_minimum_width_and_height_that_will_be_considered_for_downloading;</label>
				<row align="center">
					<label control="lab_minEmbeddedWidth">&image_width;</label>
					<hbox align="baseline">
						<textbox id="lab_minEmbeddedWidth" type="number" size="3" hidespinbuttons="true" preference="minEmbeddedWidth"/>
						<description value="px" style="margin: 0"/>
					</hbox>
				</row>
				<row align="center">
					<label control="lab_minEmbeddedHeight">&image_height;</label>
					<hbox align="baseline">
						<textbox id="lab_minEmbeddedHeight" type="number" size="3" hidespinbuttons="true" preference="minEmbeddedHeight"/>
						<description value="px" style="margin: 0"/>
					</hbox>
				</row>
				<separator height="10"/>
				<label>&enter_the_minimum_file_size;</label>
				<label>&setting_this_value_to_zero_disables_this_filter;</label>
				<row align="center">
					<label control="lab_minSize">&file_size_filter;</label>
					<hbox align="baseline">
						<textbox id="lab_minSize" type="number" size="3" hidespinbuttons="true" preference="minFileSize"/>
						<description value="&kilobytes;" style="margin: 0"/>
					</hbox>
				</row>
				<separator height="10"/>
				<label>&the_file_size_filter_is_the_only_one_used;</label>
			</rows>
		</grid>
	</groupbox>

</prefpane>

<prefpane id="hostfopts" label="&host_file;" orient="vertical">

	<preferences>
		<preference id="hostfcb_autoUpdate" name="extensions.imagegrabber.hostfautoupdate" type="bool"/>
		<preference id="hostfUpdateConfirm" name="extensions.imagegrabber.hostfupdateconfirm" type="bool"/>
		<preference id="hostfrg_mergeBehavior" name="extensions.imagegrabber.hostfmergebehavior" type="string"/>
	</preferences>

	<groupbox>
		<caption label="&host_file_update;"/>
		<checkbox id="cb_autoUpdate" preference="hostfcb_autoUpdate" label="&enable_automatic_update;" onsyncfrompreference="toggleEnableState(this.id, false, 'cb_suppressConfirm', 'rg_mergeBehavior');"/>
		<checkbox id="cb_suppressConfirm" preference="hostfUpdateConfirm" label="&suppress_host_file_update_confirmation_dialog;" class="indent"/>
		<groupbox class="indent">
			<caption label="&merge_behavior;"/>
			<radiogroup id="rg_mergeBehavior" preference="hostfrg_mergeBehavior">
				<radio label="&merge_host_file_ask;" value="ask"/>
				<radio label="&merge_host_file_overwrite;" value="overwrite"/>
				<radio label="&merge_host_file_add;" value="add"/>
			</radiogroup>
		</groupbox>
	</groupbox>

</prefpane>

<prefpane id="hostopts" label="&host_options;" orient="vertical"
	onpaneload="['maxThreads','numRetries','reqTimeout'].forEach(function(item) {
					document.getElementById('scale_' + item).setAttribute('preference', item);
					document.getElementById(item).updateElements();
					});"
	>

	<preferences>
		<preference id="maxThreads" name="extensions.imagegrabber.maxthreads" type="int"/>
		<preference id="numRetries" name="extensions.imagegrabber.numretries" type="int"/>
		<preference id="reqTimeout" name="extensions.imagegrabber.requesttimeout" type="int"/>
		<preference id="downloadTimeout" name="extensions.imagegrabber.downloadtimeout" type="int"/>
	</preferences>

	<grid>
		<rows>
			<row align="center">
				<label control="scale_maxThreads">&max_simultaneous_http_requests;</label>
				<scale id="scale_maxThreads" min="&maxThreads_LowLimit;" max="&maxThreads_HighLimit;" preference-editable="true" movetoclick="true"/>
				<textbox type="number" size="2" hidespinbuttons="true" class="plain" style="color:black" disabled="true" preference="maxThreads"/>
			</row>
			<row align="center">
				<label control="scale_numRetries">&max_number_of_retries_for_each_link;</label>
				<scale id="scale_numRetries" min="&numRetries_LowLimit;" max="&numRetries_HighLimit;" preference-editable="true" movetoclick="true"/>
				<textbox type="number" size="2" hidespinbuttons="true" class="plain" style="color:black" disabled="true" preference="numRetries"/>
			</row>
			<row align="center">
				<label control="scale_reqTimeout">&request_timeout_before_retry;</label>
				<scale id="scale_reqTimeout" min="&reqTimeout_LowLimit;" max="&reqTimeout_HighLimit;" preference-editable="true" increment="5"/>
				<textbox type="number" size="2" hidespinbuttons="true" class="plain" style="color:black" disabled="true" preference="reqTimeout"/>
			</row>
			<separator/>
			<row align="center">
				<checkbox label="&host_timeout_between_downloads;" id="cb_downloadTimeout"
					oncommand="toggleEnableState(this.id, false, 'tb_downloadTimeout', 'lab_downloadTimeout'); handleDLTimeoutControl();"
					preference="downloadTimeout"
					onsynctopreference="return (this.checked ? 3 : 0);"
				/>
			</row>
			<row align="center">
				<hbox align="center" class="indent">
					<label id="lab_downloadTimeout" control="tb_downloadTimeout">&host_timeout_seconds;</label>
					<textbox preference="downloadTimeout" id="tb_downloadTimeout" type="number" max="60" size="2"/>
				</hbox>
			</row>
		</rows>
	</grid>

</prefpane>

<prefpane id="debug" label="&debugging;" orient="vertical">

	<preferences>
		<preference id="showInConsole" name="javascript.options.showInConsole" type="bool"/>
		<preference id="enableConLog" name="extensions.imagegrabber.enableconlog" type="bool"
			onchange="if (document.getElementById('showInConsole').value != this.value) document.getElementById('cb_showInConsole').click(); checkRestart();"/>
		<preference id="enableDebug" name="extensions.imagegrabber.enabledebug" type="bool" onchange="checkRestart();"/>
	</preferences>

	<description class="header" value="&disclaimer;"/>

	<description class="indent" value="&disclaimer_line1;"/>
	<description class="indent" value="&disclaimer_line2;"/>
	<description class="indent" value="&disclaimer_line3;"/>
	<separator height="15"/>
	<checkbox id="cb_showInConsole" preference="showInConsole" hidden="true"/>
	<checkbox id="cb_enableConLog" preference="enableConLog" label="&enable_console_logging;" onclick="promptService.alert(this.window, null, (!this.checked ? '&read_disclaimer;\n' : '') + '&alert_restart;');"/>
	<checkbox id="cb_enableDebug" preference="enableDebug" label="&enable_debugging_logging;" onclick="promptService.alert(this.window, null, (!this.checked ? '&read_disclaimer;\n' : '') + '&alert_restart;');"/>
	<separator height="10"/>
	<button id="but_clear" label="&clear_log;" oncommand="ihg_Functions.clearLog();"/>
	<button id="but_copy" label="&copy_log_to_local_folder;" oncommand="ihg_Functions.copyLog();"/>

</prefpane>

<hbox class="prefWindow-dlgbuttons" flex="1">
	<button id="restartApp" label="&restart_Firefox;" class="button-link" oncommand="acceptDialog();restartApp();" disabled="true" tabindex="-1"/>
	<spacer flex="1"/>
	<button dlgtype="accept"/>
	<button dlgtype="cancel"/>
</hbox>

<script type="text/javascript">
<![CDATA[checkRestart();]]>
</script>

</prefwindow>
